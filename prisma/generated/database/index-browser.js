
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.SuperAdminScalarFieldEnum = {
  id: 'id',
  userName: 'userName',
  email: 'email',
  password: 'password',
  role: 'role',
  lastLogin: 'lastLogin',
  sync: 'sync',
  syncedAt: 'syncedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  userName: 'userName',
  phoneNumber: 'phoneNumber',
  password: 'password',
  role: 'role',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.SettingsScalarFieldEnum = {
  setting_id: 'setting_id',
  companyName: 'companyName',
  companyEmail: 'companyEmail',
  phoneNumber: 'phoneNumber',
  websiteURL: 'websiteURL',
  address: 'address',
  logoUrl: 'logoUrl',
  defaultCurrency: 'defaultCurrency',
  taxRate: 'taxRate',
  mode: 'mode',
  itermsPerPage: 'itermsPerPage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.StudentScalarFieldEnum = {
  id: 'id',
  matricNumber: 'matricNumber',
  firstName: 'firstName',
  lastName: 'lastName',
  otherNames: 'otherNames',
  email: 'email',
  phone: 'phone',
  department: 'department',
  level: 'level',
  faculty: 'faculty',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  bloodGroup: 'bloodGroup',
  genotype: 'genotype',
  allergies: 'allergies',
  chronicConditions: 'chronicConditions',
  emergencyContact: 'emergencyContact',
  emergencyPhone: 'emergencyPhone',
  emergencyRelationship: 'emergencyRelationship',
  profilePhoto: 'profilePhoto',
  address: 'address',
  stateOfOrigin: 'stateOfOrigin',
  nationality: 'nationality',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  isDeleted: 'isDeleted'
};

exports.Prisma.PhysicianScalarFieldEnum = {
  id: 'id',
  staffId: 'staffId',
  firstName: 'firstName',
  lastName: 'lastName',
  otherNames: 'otherNames',
  specialization: 'specialization',
  qualification: 'qualification',
  licenseNumber: 'licenseNumber',
  email: 'email',
  phone: 'phone',
  profilePhoto: 'profilePhoto',
  isActive: 'isActive',
  isAvailable: 'isAvailable',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  isDeleted: 'isDeleted'
};

exports.Prisma.QueueScalarFieldEnum = {
  id: 'id',
  queueNumber: 'queueNumber',
  studentId: 'studentId',
  priority: 'priority',
  status: 'status',
  checkInTime: 'checkInTime',
  calledTime: 'calledTime',
  completedTime: 'completedTime',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  appointmentNo: 'appointmentNo',
  studentId: 'studentId',
  physicianId: 'physicianId',
  appointmentDate: 'appointmentDate',
  appointmentTime: 'appointmentTime',
  reason: 'reason',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.VitalSignsScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  consultationId: 'consultationId',
  temperature: 'temperature',
  bloodPressure: 'bloodPressure',
  pulse: 'pulse',
  respiratoryRate: 'respiratoryRate',
  weight: 'weight',
  height: 'height',
  bmi: 'bmi',
  oxygenSaturation: 'oxygenSaturation',
  recordedBy: 'recordedBy',
  createdAt: 'createdAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.ConsultationScalarFieldEnum = {
  id: 'id',
  consultationNo: 'consultationNo',
  studentId: 'studentId',
  physicianId: 'physicianId',
  chiefComplaint: 'chiefComplaint',
  historyOfPresenting: 'historyOfPresenting',
  symptoms: 'symptoms',
  physicalExamination: 'physicalExamination',
  diagnosis: 'diagnosis',
  differentialDiagnosis: 'differentialDiagnosis',
  treatmentPlan: 'treatmentPlan',
  notes: 'notes',
  followUpDate: 'followUpDate',
  status: 'status',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  id: 'id',
  prescriptionNo: 'prescriptionNo',
  studentId: 'studentId',
  physicianId: 'physicianId',
  consultationId: 'consultationId',
  diagnosis: 'diagnosis',
  instructions: 'instructions',
  status: 'status',
  priority: 'priority',
  isPaid: 'isPaid',
  isDispensed: 'isDispensed',
  dispensedBy: 'dispensedBy',
  dispensedAt: 'dispensedAt',
  totalCost: 'totalCost',
  amountPaid: 'amountPaid',
  discount: 'discount',
  pharmacyNotified: 'pharmacyNotified',
  notifiedAt: 'notifiedAt',
  studentNotified: 'studentNotified',
  validUntil: 'validUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  isDeleted: 'isDeleted'
};

exports.Prisma.PrescriptionItemScalarFieldEnum = {
  id: 'id',
  prescriptionId: 'prescriptionId',
  productId: 'productId',
  drugName: 'drugName',
  dosage: 'dosage',
  frequency: 'frequency',
  duration: 'duration',
  route: 'route',
  instructions: 'instructions',
  quantityPrescribed: 'quantityPrescribed',
  quantityDispensed: 'quantityDispensed',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  isDispensed: 'isDispensed',
  dispensedAt: 'dispensedAt',
  dispensedBy: 'dispensedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.DrugDispensalScalarFieldEnum = {
  id: 'id',
  dispensalNo: 'dispensalNo',
  prescriptionId: 'prescriptionId',
  prescriptionNo: 'prescriptionNo',
  studentId: 'studentId',
  dispensedBy: 'dispensedBy',
  dispensedItems: 'dispensedItems',
  totalAmount: 'totalAmount',
  notes: 'notes',
  createdAt: 'createdAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.MedicalRecordScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  recordType: 'recordType',
  title: 'title',
  description: 'description',
  recordData: 'recordData',
  attachments: 'attachments',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  barcode: 'barcode',
  genericName: 'genericName',
  brandName: 'brandName',
  category: 'category',
  manufacturer: 'manufacturer',
  batchNumber: 'batchNumber',
  expiryDate: 'expiryDate',
  wholeSalePrice: 'wholeSalePrice',
  retailPrice: 'retailPrice',
  cost: 'cost',
  quantity: 'quantity',
  reorderLevel: 'reorderLevel',
  maxStockLevel: 'maxStockLevel',
  taxRate: 'taxRate',
  unit: 'unit',
  description: 'description',
  dosageForm: 'dosageForm',
  strength: 'strength',
  requiresPrescription: 'requiresPrescription',
  controlledSubstance: 'controlledSubstance',
  storageConditions: 'storageConditions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.PurchaseScalarFieldEnum = {
  id: 'id',
  taxRate: 'taxRate',
  subTotal: 'subTotal',
  notes: 'notes',
  amountPaid: 'amountPaid',
  grandTotal: 'grandTotal',
  paidAmount: 'paidAmount',
  balance: 'balance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  referenceNo: 'referenceNo',
  supplierId: 'supplierId',
  isDeleted: 'isDeleted'
};

exports.Prisma.PurchaseItemScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  cost: 'cost',
  productName: 'productName',
  selectedPrice: 'selectedPrice',
  priceType: 'priceType',
  quantity: 'quantity',
  discount: 'discount',
  total: 'total',
  profit: 'profit',
  sync: 'sync',
  syncedAt: 'syncedAt',
  purchaseId: 'purchaseId',
  customRetailPrice: 'customRetailPrice',
  customWholesalePrice: 'customWholesalePrice',
  expiryDate: 'expiryDate',
  batchNumber: 'batchNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.BalanceTransactionScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  amount: 'amount',
  type: 'type',
  description: 'description',
  paymentMethod: 'paymentMethod',
  reference: 'reference',
  prescriptionId: 'prescriptionId',
  balanceAfter: 'balanceAfter',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  companyName: 'companyName',
  email: 'email',
  address: 'address',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.ReceiptSettingsScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  businessName: 'businessName',
  address: 'address',
  city: 'city',
  state: 'state',
  country: 'country',
  phone: 'phone',
  email: 'email',
  website: 'website',
  receiptTitle: 'receiptTitle',
  headerMessage: 'headerMessage',
  footerMessage: 'footerMessage',
  showLogo: 'showLogo',
  logoUrl: 'logoUrl',
  showQrCode: 'showQrCode',
  qrCodeContent: 'qrCodeContent',
  customQrContent: 'customQrContent',
  showStudentInfo: 'showStudentInfo',
  showPhysicianInfo: 'showPhysicianInfo',
  showPharmacistInfo: 'showPharmacistInfo',
  showDrugCodes: 'showDrugCodes',
  showDrugDescriptions: 'showDrugDescriptions',
  showDosageInstructions: 'showDosageInstructions',
  showTimestamp: 'showTimestamp',
  use24HourFormat: 'use24HourFormat',
  paperSize: 'paperSize',
  fontSize: 'fontSize',
  printDensity: 'printDensity',
  lineSpacing: 'lineSpacing',
  primaryColor: 'primaryColor',
  accentColor: 'accentColor',
  fontFamily: 'fontFamily',
  printCopyCount: 'printCopyCount',
  autoPrint: 'autoPrint',
  language: 'language',
  currency: 'currency',
  currencySymbol: 'currencySymbol',
  currencyPosition: 'currencyPosition',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.DrugScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  category: 'category',
  manufacturer: 'manufacturer',
  description: 'description',
  activeIngredient: 'activeIngredient',
  strength: 'strength',
  dosageForm: 'dosageForm',
  quantity: 'quantity',
  reorderLevel: 'reorderLevel',
  price: 'price',
  cost: 'cost',
  expiryDate: 'expiryDate',
  batchNumber: 'batchNumber',
  unit: 'unit',
  storageConditions: 'storageConditions',
  prescriptionRequired: 'prescriptionRequired',
  supplier: 'supplier',
  isDisposed: 'isDisposed',
  disposalDate: 'disposalDate',
  disposalMethod: 'disposalMethod',
  disposalReason: 'disposalReason',
  disposalNotes: 'disposalNotes',
  disposedBy: 'disposedBy',
  createdBy: 'createdBy',
  lastStockUpdate: 'lastStockUpdate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sync: 'sync',
  syncedAt: 'syncedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.DrugCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  color: 'color',
  isActive: 'isActive',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isDeleted: 'isDeleted'
};

exports.Prisma.DrugStockMovementScalarFieldEnum = {
  id: 'id',
  drugId: 'drugId',
  type: 'type',
  quantity: 'quantity',
  reason: 'reason',
  reference: 'reference',
  notes: 'notes',
  balanceAfter: 'balanceAfter',
  warehouseId: 'warehouseId',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.DrugDisposalScalarFieldEnum = {
  id: 'id',
  drugId: 'drugId',
  disposalMethod: 'disposalMethod',
  disposalReason: 'disposalReason',
  notes: 'notes',
  warehouseId: 'warehouseId',
  disposedBy: 'disposedBy',
  disposalDate: 'disposalDate',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.role = exports.$Enums.role = {
  admin: 'admin',
  physician: 'physician',
  pharmacist: 'pharmacist',
  receptionist: 'receptionist',
  nurse: 'nurse'
};

exports.mode = exports.$Enums.mode = {
  dark: 'dark',
  light: 'light'
};

exports.priority = exports.$Enums.priority = {
  emergency: 'emergency',
  urgent: 'urgent',
  normal: 'normal'
};

exports.consultationStatus = exports.$Enums.consultationStatus = {
  waiting: 'waiting',
  in_progress: 'in_progress',
  completed: 'completed',
  cancelled: 'cancelled',
  referred: 'referred'
};

exports.prescriptionStatus = exports.$Enums.prescriptionStatus = {
  pending: 'pending',
  approved: 'approved',
  dispensed: 'dispensed',
  partially_dispensed: 'partially_dispensed',
  cancelled: 'cancelled',
  expired: 'expired'
};

exports.unit = exports.$Enums.unit = {
  kg: 'kg',
  piece: 'piece',
  liter: 'liter',
  meter: 'meter',
  tablet: 'tablet',
  capsule: 'capsule',
  ml: 'ml',
  mg: 'mg',
  bottle: 'bottle',
  tube: 'tube',
  sachet: 'sachet'
};

exports.Prisma.ModelName = {
  superAdmin: 'superAdmin',
  users: 'users',
  Settings: 'Settings',
  Student: 'Student',
  Physician: 'Physician',
  Queue: 'Queue',
  Appointment: 'Appointment',
  VitalSigns: 'VitalSigns',
  Consultation: 'Consultation',
  Prescription: 'Prescription',
  PrescriptionItem: 'PrescriptionItem',
  DrugDispensal: 'DrugDispensal',
  MedicalRecord: 'MedicalRecord',
  Product: 'Product',
  Purchase: 'Purchase',
  PurchaseItem: 'PurchaseItem',
  BalanceTransaction: 'BalanceTransaction',
  Supplier: 'Supplier',
  ReceiptSettings: 'ReceiptSettings',
  Drug: 'Drug',
  DrugCategory: 'DrugCategory',
  DrugStockMovement: 'DrugStockMovement',
  DrugDisposal: 'DrugDisposal'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
